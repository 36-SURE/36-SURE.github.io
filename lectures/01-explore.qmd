---
title: "Exploring data: into the `tidyverse`"
author: "<br>SURE 2024<br><br>Department of Statistics & Data Science<br>Carnegie Mellon University"
footer:  "[36-SURE.github.io](https://36-sure.github.io)"
format:
  revealjs:
    theme: theme.scss
    chalkboard: true
    smaller: true
    slide-number: c/t
    code-line-numbers: false
    linestretch: 1.25
    html-math-method:
      method: mathjax
      url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
---

# Data science workflow

## Workflow diagram

[![Source: R for Data Science (2e)](https://r4ds.hadley.nz/diagrams/data-science/base.png){width="888"}](https://r4ds.hadley.nz/intro)

-   **Exploring data: data wrangling and data visualization**

-   Aspects of data wrangling

    -   import: load in data (e.g., `read_csv()`)

    -   tidy: each row is an observation, each column is a variable

    -   transform: filter observations, create new variables, etc.

## Exploratory data analysis

-   What is the goal of EDA?
    -   to perform initial investigations on the data in order to better understand the data, discover trends/patterns, spot anomalies, etc.

. . .

-   ["EDA is an iterative cycle"](https://r4ds.hadley.nz/eda)

    -   questions about data ⟶ wrangling ⟶ visualization

. . .

-   ["EDA is a state of mind"](https://r4ds.hadley.nz/eda)

::: aside
The term EDA was coined by statistician John Tukey in the 1970s.
:::

## Exploratory data analysis (cont'd)

-   Data can be explored numerically (tables, descriptive statistics, etc.) or visually (graphs)

-   Examples of questions

    -   What type of variation do the variables display?

    -   What type of relationships exist between variables?

. . .

-   EDA is **NOT** a replacement for statistical inference and learning

. . .

-   EDA is an important and necessary step to build intuition

## First example: MLB batting

-   Import `Batting` table of historical batting statistics from the `Lahman`

```{r}
#| echo: true
#| message: false

library(tidyverse) # load the tidyverse
library(Lahman) # load the Lahman package to access its datasets
Batting <- as_tibble(Batting) # initialize the Batting dataset
```

. . .

-   Basic info about the `Batting` dataset

```{r}
#| echo: true

# number of rows and columns
# can also do nrow(Batting) and ncol(Batting)
dim(Batting) 
```

```{r}
#| echo: true
class(Batting)
```

::: aside
`tbl` (pronounced `tibble`) is the `tidyverse` way of storing tabular data, like a spreadsheet or `data.frame`
:::

## First example: MLB batting

-   View the first 6 (by default) rows with `head()`

```{r}
#| echo: true

# try just typing Batting into your console, what happens?
# also try glimpse(Batting)
head(Batting) 
```

-   Is the `Batting` dataset tidy?

    -   Each row: a player's season stint with a team (i.e. players can play for multiple teams in year)

    -   Each column: different measurement or recording about the player-team-season observation (get all column names with `colnames(Batting)` or `names(Batting)`)

## Descriptive statistics

Summarize quantitative (e.g. `yearID`, `AB`) and categorical (e.g. `teamID`, `lgID`) variables in different ways...

. . .

-   Summary statistics for quantitative variables with the `summary()` function

```{r}
#| echo: true
summary(Batting$yearID)
```

-   Counts of categorical variables with the `table()` function

```{r}
#| echo: true
# be careful it ignores NA values
# can do table(Batting$lgID, useNA = "always")
table(Batting$lgID)
```

# Data wrangling with `dplyr`

## The `dplyr` package

-   `dplyr` is a package within the `tidyverse` with functions for data wrangling

-   The `dplyr` data verbs for manipulating data

    -   `filter()`

    -   `select()`

    -   `arrange()`

    -   `mutate()`

    -   `group_by()`

    -   `summarize()`

## `filter()`

-   **Use `filter()` to extract ROWS (observations) that meet certain conditions**

-   **Need to specify a logical condition (aka boolean expression)**

## `filter()`

Example: Extract batting stats for 2 leagues AL and NL only

```{r}
#| echo: true
filter(Batting, lgID %in% c("AL", "NL")) # or filter(Batting, lgID == "AL" | lgID == "NL")
```

## `filter()`

Example: Extract batting stats for Pirates players in 2022

```{r}
#| echo: true

# multiple conditions
filter(Batting, yearID == 2022 & teamID == "PIT")
```

## Logical conditions

::: columns
::: {.column width="50%" style="text-align: left;"}
-   `x < y`: less than
-   `x <= y`: less than or equal to
-   `x == y`: equal to
-   `x != y`: not equal to
-   `x > y`: greater than
-   `x >= y`: greater than or equal to
:::

::: {.column width="50%" style="text-align: left;"}
-   `x %in% y`: whether the value is present in a given vector
-   `is.na(x)`: is missing
-   `!is.na(x)`: is not missing
-   `x & y`: and
-   `x | y`: or
-   `!x`: not
:::
:::

... and basically anything that returns a TRUE/FALSE value

## Common mistakes

::: columns
::: {.column width="50%" style="text-align: left;"}
-   `=` instead of `==`

nay

```{r}
#| eval: false
#| echo: true
filter(Batting, team = "PIT")
```

yay

```{r}
#| eval: false
#| echo: true
filter(Batting, team == "PIT")
```
:::

::: {.column width="50%" style="text-align: left;"}
-   Forgetting quotes (for string/character)

nay

```{r}
#| eval: false
#| echo: true
filter(Batting, team == PIT)
```

yay

```{r}
#| eval: false
#| echo: true
filter(Batting, team == "PIT")
```
:::
:::

## `select()`

-   **Use `select()` to extract COLUMNS (variables) of interest**

-   **Just simply specify the column names...**

```{r}
#| echo: true
select(Batting, playerID, yearID, G, AB, R, H, HR, BB)
```

## `mutate()`

-   **Use `mutate()` to create new variables**

-   New variables created via `mutate()` are usually based on existing variables

    -   Make sure to give your new variable a name

    -   Note that naming the new variable the same as the existing variable will overwrite the original column

## `mutate()`

Example: Get the batting average and strikeout-to-walk ratio for every player

```{r}
#| echo: true
mutate(Batting, batting_avg = H / AB, so_bb_ratio = SO / BB)
```

## `arrange()`

-   Sort observations (rows) by variables (columns)

    -   ascending order is the default (low to high for numeric columns, alphabetical order for character columns)

. . .

Example: Who holds the single-season home run record?

```{r}
#| echo: true
arrange(Batting, desc(HR)) # desc() for descending order
```

## `arrange()`

Example: arrange by multiple columns --- at bats from high to low (first sort), then home runs from low to high (second sort) --- variable order matters

```{r}
#| echo: true
arrange(Batting, desc(AB), HR)
```

## Performing multiple operations

-   What if we want to perform several different tasks using multiple `dplyr` verbs?

. . .

-   Introducing the pipe operator `|>`

. . .

-   You might have seen the `magrittr` pipe `%>%`...

    -   ...from the `maggritr` package, automatically loaded when loading `tidyverse`

-   Recently, many people (including Hadley Wickham) have switched to `|>`, the built-in "native" pipe to base `R`

    -   [What are the differences?](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/)

::: aside
Shortcut for the pipe operator in RStudio: Command (or Ctrl) + Shift + M
:::

## The pipe operator

-   Use `|>` to perform a sequence of operations

-   The pipe takes an object (e.g., tibble, data frame, matrix, vector, etc.) on the left and passes it as the first argument of the function on the right

```{r}
#| echo: true
#| eval: false
# the workflow
object |>
  first_operation(...) |>
  second_operation(...) |> 
  .
  .
  .
  last_operation(...)
```

## Performing multiple operations

Example: Which Pirates players had the highest batting average in 2022, among those with at least 50 at bats?

. . .

What are the tasks to be done here?

. . .

-   `filter()`: only Pirates players in 2022 with at least 50 at bats

-   `mutate()`: create a new column for batting average

-   `arrange()`: sort by batting average in descending order

-   `select()`: report player name, at bats, and batting average

## Performing multiple operations

```{r}
#| echo: true
Batting |> 
  filter(yearID == 2022, teamID == "PIT", AB >= 50) |> 
  mutate(batting_avg = H / AB) |> 
  arrange(desc(batting_avg)) |> 
  select(playerID, AB, batting_avg)
```

. . .

Without the pipe, the code looks every ugly with functions nested within functions...

```{r}
#| eval: false
#| echo: true
select(arrange(mutate(filter(Batting, yearID == 2022, teamID == "PIT", AB >= 50), batting_avg = H / AB), 
desc(batting_avg)), playerID, AB, batting_avg)
```

## `summarize()` (by itself)

-   Use `summarize()` to collapse the data down to a single row (per group) by aggregating variables into single values

-   Useful for computing summaries (e.g., mean, median, max, min, correlation, etc.)

```{r}
#| echo: true
Batting |> 
  summarize(median_at_bats = median(AB))

Batting |> 
  summarize(cor_ab_hr = cor(AB, HR))
```

## `group_by()` and `summarize()`

-   `group_by()` converts the data into a "grouped tbl" where operations are performed by group

    -   i.e., it splits the data into groups based on values in a column

-   `group_by()` becomes powerful when combining with `summarize()`

-   After the operation at the group-level is done, use `ungroup()` to remove grouping

## `group_by()` and `summarize()`

Example: How many home runs, strike outs, and walks did each team accumulate in each season from 2015 to 2019?

```{r}
#| echo: true
Batting |> 
  filter(yearID %in% 2015:2019) |> 
  group_by(teamID) |> 
  summarize(total_hr = sum(HR), total_so = sum(SO), total_bb = sum(BB)) |> 
  arrange(desc(total_hr))
```

# The lesser-known stars of `dplyr`

## `count()`

::: columns
::: {.column width="50%" style="text-align: left;"}
`count()` returns the number of observations in each group

```{r}
#| echo: true
Batting |> 
  count(lgID, name = "freq")
```

```{r}
#| echo: true
# recall that in base R...
table(Batting$lgID)
```
:::

::: {.column width="50%" style="text-align: left;"}
This can also be done with `group_by()` and `summarize()`

```{r}
#| echo: true
# note: count is a "shortcut" of this
Batting |> 
  group_by(lgID) |> 
  summarize(freq = n()) |> 
  ungroup()
```
:::
:::

## `slice_*()` family for subsetting rows

-   `slice()`: extract rows (observations) based on the row index

```{r}
#| echo: true
Batting |> 
  slice(c(1, 99, 101, 500))
```

. . .

-   `slice_head()` / `slice_tail()`: extract the first / last `n` rows

```{r}
#| echo: true
# Batting |> slice_tail(n = 5)
Batting |> 
  slice_head(n = 5)
```

## `slice_*()` family for subsetting rows

-   `slice_min()` / `slice_max()`: extract rows with the smallest or largest values of a variable

```{r}
#| echo: true
# single-season home run record (top 5)
Batting |> 
  slice_max(HR, n = 5)
```

. . .

-   `slice_sample()`: randomly sample a specified number / fraction of observation in the data

**Useful for performing resampling (e.g., bootstrap, cross-validation, etc.)**

```{r}
#| eval: false
#| echo: true
# randomly sample 1000 rows (without replacement, by default)
Batting |> 
  slice_sample(n = 1000)

# randomly sample 70% of the rows, with replacement
Batting |> 
  slice_sample(prop = 0.7, replace = TRUE)
```

## Putting it all together

Example: Get batting stats for each year: each row is a year with the following variables

-   total hits, home runs, strikeouts, walks, atbats
-   total batting average for each year = total H / total AB
-   only keeps AL and NL leagues

. . .

```{r}
#| echo: true
yearly_batting <- Batting |>
  filter(lgID %in% c("AL", "NL")) |>
  group_by(yearID) |>
  summarize(total_h = sum(H, na.rm = TRUE),
            total_hr = sum(HR, na.rm = TRUE),
            total_so = sum(SO, na.rm = TRUE),
            total_bb = sum(BB, na.rm = TRUE),
            total_ab = sum(AB, na.rm = TRUE)) |>
  mutate(batting_avg = total_h / total_ab)
```

## Putting it all together

What are the top three years with the most HRs?

. . .

```{r}
#| echo: true
yearly_batting |> 
  slice_max(total_hr, n = 3)
```

```{r}
#| echo: true
# or this 
yearly_batting |>
  arrange(desc(total_hr)) |>
  slice(1:3)
```

## Putting it all together

Which years have the best and worst strikeout to walk ratios?

. . .

```{r}
#| echo: true
yearly_batting |>
  mutate(so_bb_ratio = total_so / total_bb) |>
  arrange(so_bb_ratio) |>
  slice(c(1, n()))
```

## What's next?

::: columns
::: {.column width="50%" style="text-align: left;"}
**DATA VISUALIZATION**

> The simple graph has brought more information to the data analyst’s mind than any other device. — John Tukey

-   Use `ggplot2` (and the grammar of graphics) to visually explore data

-   More intuitive than base `R` plotting

-   Different types of visualizations for categorical and quantitative data, faceting, etc.

-   `dplyr` verbs and `|>` leads to natural pipeline for EDA
:::

::: {.column width="50%" style="text-align: center;"}
```{r}
#| fig-height: 10
yearly_batting |>
  select(yearID, HRs = total_hr, Strikeouts = total_so, Walks = total_bb) |>
  pivot_longer(HRs:Walks, names_to = "stat", values_to = "val") |>
  ggplot(aes(yearID, val)) +
  geom_line(color = "darkblue") +
  geom_point(alpha = 0.8, color = "darkblue") +
  facet_wrap(~ stat, scales = "free_y", ncol = 1) +
  labs(x = "Year", 
       y = "Total of statistic",
       title = "The rise of three true outcomes in baseball",
       caption = "Data courtesy of Lahman") +
  theme_bw(base_size = 20) +
  theme(strip.background = element_blank(),
        plot.title = element_text(hjust = 0.5, face = "bold"))
```
:::
:::

## Check out this song

{{< video https://youtu.be/p8Py9C8iq2s width="800" height="600" >}}
